name: Build AppFlowy iOS ipa

on:
  workflow_dispatch:
    inputs:
        build_version:
            description: 'Build version'
            required: true
            default: '0'


env:
  FLUTTER_VERSION: "3.18.0-0.2.pre"
  RUST_TOOLCHAIN: "1.75"

jobs:
  build:
    strategy:
      fail-fast: true
      matrix:
        os: [macos-latest]
        include:
          - target: aarch64-apple-darwin
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
            repository: AppFlowy-IO/AppFlowy
            ref: main

      - name: Install Rust toolchain
        id: rust_toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: ${{ matrix.target }}
          override: true
          profile: minimal

      - name: Install flutter
        id: flutter
        uses: subosito/flutter-action@v2
        with:
          channel: "beta"
          flutter-version: ${{ env.FLUTTER_VERSION }}
          cache: true

      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
            ndk-version: "r24"
            add-to-path: true

      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.os }}
          workspaces: |
            frontend/rust-lib

      - uses: davidB/rust-cargo-make@v1
        with:
          version: "0.36.6"

      - name: Install prerequisites
        working-directory: frontend
        run: |
          rustup target install aarch64-apple-darwin
          cargo install --force duckscript_cli
          cargo install cargo-ndk
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo wget -qO /etc/apt/trusted.gpg.d/dart_linux_signing_key.asc https://dl-ssl.google.com/linux/linux_signing_key.pub
            sudo wget -qO /etc/apt/sources.list.d/dart_stable.list https://storage.googleapis.com/download.dartlang.org/linux/debian/dart_stable.list
            sudo apt-get update
            sudo apt-get install -y dart curl build-essential libssl-dev clang cmake ninja-build pkg-config libgtk-3-dev
            sudo apt-get install keybinder-3.0 libnotify-dev
            sudo apt-get install gcc-multilib
          elif [ "$RUNNER_OS" == "Windows" ]; then
            vcpkg integrate install
          elif [ "$RUNNER_OS" == "macOS" ]; then
            echo 'do nothing'
          fi
          cargo make appflowy-flutter-deps-tools
        shell: bash

      - name: Generate env file
        working-directory: frontend/appflowy_flutter
        run: |
          echo "${{ secrets.CLOUD_URL }}" > .env
          echo "${{ secrets.CLOUD_TYPE }}" >> .env
        shell: bash

      - name: Build AppFlowy
        working-directory: frontend
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        run: |
            cargo make --env BUILD_VERSION=10 --profile production-ios-arm64 appflowy-ios

      - name: Upload ipa
        uses: actions/upload-artifact@v2
        with:
          name: AppFlowy.ipa
          path: frontend/appflowy_flutter/build/ios/ipa/

      - name: Upload to testflight
        working-directory: frontend/appflowy_flutter/build/ios/ipa/
        run: xcrun altool --upload-app -f AppFlowy.ipa -t ios -u "lucas.xu@appflowy.io" -p tnwm-mwrs-lffy-ytwp