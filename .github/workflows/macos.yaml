name: Build AppFlowy macOS

on:
  workflow_dispatch:
    inputs:
      repo:
        description: "Repo"
        required: true
        default: "AppFlowy-IO/AppFlowy"
      branch:
        description: "Branch"
        required: true
        default: "main"
      build_name:
        description: "Build Version (if not provided, it will be fetched from pubspec.yaml)"
        required: false
      arch:
        type: choice
        description: 'Build Architecture'
        required: true
        options:
            - All
            - x86_64
            - aarch64
            - universal
      server_type:
        type: choice
        description: 'Server Type (1 for local, 2 for cloud)'
        required: true
        default: '2'
        options:
            - 1
            - 2
      server_url:
        description: 'Server URL'
        required: true
        default: 'https://beta.appflowy.cloud'

env:
  FLUTTER_VERSION: "3.18.0-0.2.pre"
  RUST_TOOLCHAIN: "1.75"

jobs:
  x86_64:
    runs-on: macos-11

    if: ${{ github.event.inputs.arch == 'All' || github.event.inputs.arch == 'x86_64' }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.inputs.repo }}
          ref: ${{ github.event.inputs.branch }}

      - name: Install flutter
        uses: subosito/flutter-action@v2
        with:
          cache: true
          channel: "beta"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      # get build name from pubspec.yaml
      - name: Get build name if not provided
        id: get_build_name
        run: |
          if [ -z "${{ github.event.inputs.build_name }}" ]; then
            echo "build_name is not provided, fetching from pubspec.yaml..."
            echo "build_name=$(grep 'version: ' frontend/appflowy_flutter/pubspec.yaml | awk '{print $2}')" >> $GITHUB_ENV
          else
            echo "build_name=${{ github.event.inputs.build_name }}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Set Env
        run: |
          echo "MACOS_APP_RELEASE_PATH=frontend/appflowy_flutter/product/$build_name/macos/Release" >> $GITHUB_ENV
          echo "MACOS_X86_ZIP_NAME=AppFlowy-$build_name-macos-x86_64.zip" >> $GITHUB_ENV
          echo "MACOS_DMG_NAME=AppFlowy-$build_name-macos-x86_64" >> $GITHUB_ENV
        shell: bash

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: x86_64-apple-darwin
          override: true
          components: rustfmt
          profile: minimal

      - uses: davidB/rust-cargo-make@v1
        with:
          version: '0.37.5'

      - name: Install prerequisites
        working-directory: frontend
        run: |
          cargo install --force duckscript_cli

      - name: Generate env file
        working-directory: frontend/appflowy_flutter
        run: |
          echo "${{ github.env.inputs.server_url }}" > .env
          echo "${{ github.env.inputs.server_type }}" >> .env
        shell: bash

      - name: Build AppFlowy
        working-directory: frontend
        run: |
          flutter config --enable-macos-desktop
          dart ./scripts/flutter_release_build/build_flowy.dart run . $build_name

      - name: Codesign AppFlowy
        run: |
          echo ${{ secrets.MACOS_CERTIFICATE_BASE64 }} | base64 --decode > certificate.p12
          security create-keychain -p action build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p action build.keychain
          security import certificate.p12 -k build.keychain -P ${{ secrets.P12_PASSWORD }} -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k action build.keychain
          /usr/bin/codesign --force --options runtime --deep --sign "${{ secrets.MACOS_CODESIGN_ID }}" "$MACOS_APP_RELEASE_PATH/AppFlowy.app" -v

      - name: Create macOS dmg
        run: |
          brew install create-dmg
          create-dmg \
          --volname $MACOS_DMG_NAME \
          --hide-extension "AppFlowy.app" \
          --background frontend/scripts/dmg_assets/AppFlowyInstallerBackground.jpg \
          --window-size 600 450 \
          --icon-size 94 \
          --icon "AppFlowy.app" 141 249 \
          --app-drop-link 458 249 \
          "$MACOS_APP_RELEASE_PATH/$MACOS_DMG_NAME.dmg" \
          "$MACOS_APP_RELEASE_PATH/AppFlowy.app"

      - name: Notarize AppFlowy
        run: |
          xcrun notarytool submit $MACOS_APP_RELEASE_PATH/$MACOS_DMG_NAME.dmg --apple-id ${{ secrets.MACOS_NOTARY_USER }} --team-id ${{ secrets.MACOS_TEAM_ID }} --password ${{ secrets.MACOS_NOTARY_PWD }} -v -f "json" --wait

      - name: Archive Asset
        working-directory: $MACOS_APP_RELEASE_PATH
        run: zip --symlinks -qr $MACOS_X86_ZIP_NAME AppFlowy.app

      - name: Upload ZIP
        uses: actions/upload-artifact@v2
        with:
          name: $MACOS_X86_ZIP_NAME
          path: $MACOS_APP_RELEASE_PATH/$MACOS_X86_ZIP_NAME

      - name: Upload DMG
        uses: actions/upload-artifact@v2
        with:
          name: $MACOS_DMG_NAME.dmg
          path: $MACOS_APP_RELEASE_PATH/$MACOS_DMG_NAME.dmg

  aarch64:
    runs-on: macos-13-xlarge

    if: ${{ github.event.inputs.arch == 'All' || github.event.inputs.arch == 'aarch64' }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.inputs.repo }}
          ref: ${{ github.event.inputs.branch }}

      # get build name from pubspec.yaml
      - name: Get build name if not provided
        id: get_build_name
        run: |
          if [ -z "${{ github.event.inputs.build_name }}" ]; then
            echo "build_name is not provided, fetching from pubspec.yaml..."
            echo "build_name=$(grep 'version: ' frontend/appflowy_flutter/pubspec.yaml | awk '{print $2}')" >> $GITHUB_ENV
          else
            echo "build_name=${{ github.event.inputs.build_name }}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Set Env
        run: |
          echo "MACOS_APP_RELEASE_PATH=frontend/appflowy_flutter/product/$build_name/macos/Release" >> $GITHUB_ENV
          echo "MACOS_AARCH64_ZIP_NAME=AppFlowy-$build_name-macos-aarch64.zip" >> $GITHUB_ENV
          echo "MACOS_DMG_NAME=AppFlowy-$build_name-macos-aarch64" >> $GITHUB_ENV
        shell: bash

      - name: Install flutter
        uses: subosito/flutter-action@v2
        with:
          cache: true
          channel: "beta"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          target: aarch64-apple-darwin
          override: true
          components: rustfmt
          profile: minimal

      - uses: davidB/rust-cargo-make@v1
        with:
          version: '0.37.5'

      - name: Install prerequisites
        working-directory: frontend
        run: |
          cargo install --force duckscript_cli

      - name: Generate env file
        working-directory: frontend/appflowy_flutter
        run: |
          echo "${{ github.env.inputs.server_url }}" > .env
          echo "${{ github.env.inputs.server_type }}" >> .env
        shell: bash

      - name: Build AppFlowy
        working-directory: frontend
        run: |
          flutter config --enable-macos-desktop
          dart ./scripts/flutter_release_build/build_flowy.dart run . $build_name

      - name: Codesign AppFlowy
        run: |
          echo ${{ secrets.MACOS_CERTIFICATE_BASE64 }} | base64 --decode > certificate.p12
          security create-keychain -p action build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p action build.keychain
          security import certificate.p12 -k build.keychain -P ${{ secrets.P12_PASSWORD }} -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k action build.keychain
          /usr/bin/codesign --force --options runtime --deep --sign "${{ secrets.MACOS_CODESIGN_ID }}" "$MACOS_APP_RELEASE_PATH/AppFlowy.app" -v

      - name: Create macOS dmg
        continue-on-error: true
        run: |
          brew install create-dmg
          create-dmg \
          --volname $MACOS_DMG_NAME \
          --hide-extension "AppFlowy.app" \
          --background frontend/scripts/dmg_assets/AppFlowyInstallerBackground.jpg \
          --window-size 600 450 \
          --icon-size 94 \
          --icon "AppFlowy.app" 141 249 \
          --app-drop-link 458 249 \
          "$MACOS_APP_RELEASE_PATH/$MACOS_DMG_NAME.dmg" \
          "$MACOS_APP_RELEASE_PATH/AppFlowy.app"

      - name: Notarize AppFlowy
        continue-on-error: true
        run: |
          xcrun notarytool submit $MACOS_APP_RELEASE_PATH/$MACOS_DMG_NAME.dmg --apple-id ${{ secrets.MACOS_NOTARY_USER }} --team-id ${{ secrets.MACOS_TEAM_ID }} --password ${{ secrets.MACOS_NOTARY_PWD }} -v -f "json" --wait

      - name: Archive Asset
        working-directory: $MACOS_APP_RELEASE_PATH
        run: zip --symlinks -qr $MACOS_AARCH64_ZIP_NAME AppFlowy.app

      - name: Upload ZIP
        uses: actions/upload-artifact@v2
        with:
          name: $MACOS_AARCH64_ZIP_NAME
          path: $MACOS_APP_RELEASE_PATH/$MACOS_AARCH64_ZIP_NAME

      - name: Upload DMG
        uses: actions/upload-artifact@v2
        continue-on-error: true
        with:
          name: $MACOS_DMG_NAME.dmg
          path: $MACOS_APP_RELEASE_PATH/$MACOS_DMG_NAME.dmg


  universal:
    runs-on: macos-11

    if: ${{ github.event.inputs.arch == 'All' || github.event.inputs.arch == 'universal' }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.inputs.repo }}
          ref: ${{ github.event.inputs.branch }}

      # get build name from pubspec.yaml
      - name: Get build name if not provided
        id: get_build_name
        run: |
          if [ -z "${{ github.event.inputs.build_name }}" ]; then
            echo "build_name is not provided, fetching from pubspec.yaml..."
            echo "build_name=$(grep 'version: ' frontend/appflowy_flutter/pubspec.yaml | awk '{print $2}')" >> $GITHUB_ENV
          else
            echo "build_name=${{ github.event.inputs.build_name }}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Set Env
        run: |
          echo "MACOS_APP_RELEASE_PATH=frontend/appflowy_flutter/product/$build_name/macos/Release" >> $GITHUB_ENV
          echo "MACOS_AARCH64_ZIP_NAME=AppFlowy-$build_name-macos-universal.zip" >> $GITHUB_ENV
          echo "MACOS_DMG_NAME=AppFlowy-$build_name-macos-universal" >> $GITHUB_ENV
        shell: bash

      - name: Install flutter
        uses: subosito/flutter-action@v2
        with:
          cache: true
          channel: "beta"
          flutter-version: ${{ env.FLUTTER_VERSION }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          targets: "aarch64-apple-darwin,x86_64-apple-darwin"
          components: rustfmt

      - uses: davidB/rust-cargo-make@v1
        with:
          version: '0.37.5'

      - name: Install prerequisites
        working-directory: frontend
        run: |
          cargo install --force duckscript_cli

      - name: Generate env file
        working-directory: frontend/appflowy_flutter
        run: |
          echo "${{ github.env.inputs.server_url }}" > .env
          echo "${{ github.env.inputs.server_type }}" >> .env
        shell: bash

      - name: Build AppFlowy
        working-directory: frontend
        run: |
          flutter config --enable-macos-desktop
          sh scripts/flutter_release_build/build_universal_package_for_macos.sh $build_name

      - name: Codesign AppFlowy
        run: |
          echo ${{ secrets.MACOS_CERTIFICATE_BASE64 }} | base64 --decode > certificate.p12
          security create-keychain -p action build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p action build.keychain
          security import certificate.p12 -k build.keychain -P ${{ secrets.P12_PASSWORD }} -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k action build.keychain
          /usr/bin/codesign --force --options runtime --deep --sign "${{ secrets.MACOS_CODESIGN_ID }}" "$MACOS_APP_RELEASE_PATH/AppFlowy.app" -v

      - name: Create macOS dmg
        run: |
          brew install create-dmg
          create-dmg \
          --volname $MACOS_DMG_NAME \
          --hide-extension "AppFlowy.app" \
          --background frontend/scripts/dmg_assets/AppFlowyInstallerBackground.jpg \
          --window-size 600 450 \
          --icon-size 94 \
          --icon "AppFlowy.app" 141 249 \
          --app-drop-link 458 249 \
          "$MACOS_APP_RELEASE_PATH/$MACOS_DMG_NAME.dmg" \
          "$MACOS_APP_RELEASE_PATH/AppFlowy.app"

      - name: Check for Secret availability
        id: secret-check
        shell: bash
        run: |
          if [ "${{ secrets.MACOS_NOTARY_USER }}" == '' ]; then
            echo "available=false" >> $GITHUB_OUTPUT;
          elif [ "${{ secrets.MACOS_TEAM_ID }}" == '' ]; then
            echo "available=false" >> $GITHUB_OUTPUT;
          elif [ "${{ secrets.MACOS_NOTARY_PWD }}" == '' ]; then
            echo "available=false" >> $GITHUB_OUTPUT;
          else
            echo "available=true" >> $GITHUB_OUTPUT;
          fi

      - name: Notarize AppFlowy
        if: ${{ steps.secret-check.outputs.available == 'true' }}
        run: |
          xcrun notarytool submit $MACOS_APP_RELEASE_PATH/$MACOS_DMG_NAME.dmg --apple-id ${{ secrets.MACOS_NOTARY_USER }} --team-id ${{ secrets.MACOS_TEAM_ID }} --password ${{ secrets.MACOS_NOTARY_PWD }} -v -f "json" --wait

      - name: Archive Asset
        working-directory: $MACOS_APP_RELEASE_PATH
        run: zip --symlinks -qr $MACOS_AARCH64_ZIP_NAME AppFlowy.app

      - name: Upload ZIP
        uses: actions/upload-artifact@v2
        with:
          name: $MACOS_AARCH64_ZIP_NAME
          path: $MACOS_APP_RELEASE_PATH/$MACOS_AARCH64_ZIP_NAME

      - name: Upload DMG
        uses: actions/upload-artifact@v2
        with:
          name: $MACOS_DMG_NAME.dmg
          path: $MACOS_APP_RELEASE_PATH/$MACOS_DMG_NAME.dmg
